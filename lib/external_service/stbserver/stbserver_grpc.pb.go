// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: stbserver.proto

package stbserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StbServer_GetSummonerInfo_FullMethodName    = "/stbserver.StbServer/GetSummonerInfo"
	StbServer_PutSummonerInfo_FullMethodName    = "/stbserver.StbServer/PutSummonerInfo"
	StbServer_GetAllSummonerInfo_FullMethodName = "/stbserver.StbServer/GetAllSummonerInfo"
	StbServer_ShareSummonerInfo_FullMethodName  = "/stbserver.StbServer/ShareSummonerInfo"
	StbServer_SendFile_FullMethodName           = "/stbserver.StbServer/SendFile"
	StbServer_SendGroupFile_FullMethodName      = "/stbserver.StbServer/SendGroupFile"
	StbServer_HeartBeat_FullMethodName          = "/stbserver.StbServer/HeartBeat"
)

// StbServerClient is the client API for StbServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StbServerClient interface {
	// rpc ServerTest()returns(){}不能使用参数或者返回值为空的服务
	GetSummonerInfo(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Character, error)
	PutSummonerInfo(ctx context.Context, opts ...grpc.CallOption) (StbServer_PutSummonerInfoClient, error)
	GetAllSummonerInfo(ctx context.Context, in *Identity, opts ...grpc.CallOption) (StbServer_GetAllSummonerInfoClient, error)
	ShareSummonerInfo(ctx context.Context, opts ...grpc.CallOption) (StbServer_ShareSummonerInfoClient, error)
	SendFile(ctx context.Context, opts ...grpc.CallOption) (StbServer_SendFileClient, error)
	SendGroupFile(ctx context.Context, opts ...grpc.CallOption) (StbServer_SendGroupFileClient, error)
	HeartBeat(ctx context.Context, opts ...grpc.CallOption) (StbServer_HeartBeatClient, error)
}

type stbServerClient struct {
	cc grpc.ClientConnInterface
}

func NewStbServerClient(cc grpc.ClientConnInterface) StbServerClient {
	return &stbServerClient{cc}
}

func (c *stbServerClient) GetSummonerInfo(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Character, error) {
	out := new(Character)
	err := c.cc.Invoke(ctx, StbServer_GetSummonerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stbServerClient) PutSummonerInfo(ctx context.Context, opts ...grpc.CallOption) (StbServer_PutSummonerInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &StbServer_ServiceDesc.Streams[0], StbServer_PutSummonerInfo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stbServerPutSummonerInfoClient{stream}
	return x, nil
}

type StbServer_PutSummonerInfoClient interface {
	Send(*Identity) error
	CloseAndRecv() (*Character, error)
	grpc.ClientStream
}

type stbServerPutSummonerInfoClient struct {
	grpc.ClientStream
}

func (x *stbServerPutSummonerInfoClient) Send(m *Identity) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stbServerPutSummonerInfoClient) CloseAndRecv() (*Character, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Character)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stbServerClient) GetAllSummonerInfo(ctx context.Context, in *Identity, opts ...grpc.CallOption) (StbServer_GetAllSummonerInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &StbServer_ServiceDesc.Streams[1], StbServer_GetAllSummonerInfo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stbServerGetAllSummonerInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StbServer_GetAllSummonerInfoClient interface {
	Recv() (*Character, error)
	grpc.ClientStream
}

type stbServerGetAllSummonerInfoClient struct {
	grpc.ClientStream
}

func (x *stbServerGetAllSummonerInfoClient) Recv() (*Character, error) {
	m := new(Character)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stbServerClient) ShareSummonerInfo(ctx context.Context, opts ...grpc.CallOption) (StbServer_ShareSummonerInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &StbServer_ServiceDesc.Streams[2], StbServer_ShareSummonerInfo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stbServerShareSummonerInfoClient{stream}
	return x, nil
}

type StbServer_ShareSummonerInfoClient interface {
	Send(*Identity) error
	Recv() (*Character, error)
	grpc.ClientStream
}

type stbServerShareSummonerInfoClient struct {
	grpc.ClientStream
}

func (x *stbServerShareSummonerInfoClient) Send(m *Identity) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stbServerShareSummonerInfoClient) Recv() (*Character, error) {
	m := new(Character)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stbServerClient) SendFile(ctx context.Context, opts ...grpc.CallOption) (StbServer_SendFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &StbServer_ServiceDesc.Streams[3], StbServer_SendFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stbServerSendFileClient{stream}
	return x, nil
}

type StbServer_SendFileClient interface {
	Send(*FileMessage) error
	CloseAndRecv() (*FileResult, error)
	grpc.ClientStream
}

type stbServerSendFileClient struct {
	grpc.ClientStream
}

func (x *stbServerSendFileClient) Send(m *FileMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stbServerSendFileClient) CloseAndRecv() (*FileResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stbServerClient) SendGroupFile(ctx context.Context, opts ...grpc.CallOption) (StbServer_SendGroupFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &StbServer_ServiceDesc.Streams[4], StbServer_SendGroupFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stbServerSendGroupFileClient{stream}
	return x, nil
}

type StbServer_SendGroupFileClient interface {
	Send(*FileMessage) error
	CloseAndRecv() (*FileResult, error)
	grpc.ClientStream
}

type stbServerSendGroupFileClient struct {
	grpc.ClientStream
}

func (x *stbServerSendGroupFileClient) Send(m *FileMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stbServerSendGroupFileClient) CloseAndRecv() (*FileResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stbServerClient) HeartBeat(ctx context.Context, opts ...grpc.CallOption) (StbServer_HeartBeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &StbServer_ServiceDesc.Streams[5], StbServer_HeartBeat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stbServerHeartBeatClient{stream}
	return x, nil
}

type StbServer_HeartBeatClient interface {
	Send(*Heart) error
	CloseAndRecv() (*Result, error)
	grpc.ClientStream
}

type stbServerHeartBeatClient struct {
	grpc.ClientStream
}

func (x *stbServerHeartBeatClient) Send(m *Heart) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stbServerHeartBeatClient) CloseAndRecv() (*Result, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StbServerServer is the server API for StbServer service.
// All implementations must embed UnimplementedStbServerServer
// for forward compatibility
type StbServerServer interface {
	// rpc ServerTest()returns(){}不能使用参数或者返回值为空的服务
	GetSummonerInfo(context.Context, *Identity) (*Character, error)
	PutSummonerInfo(StbServer_PutSummonerInfoServer) error
	GetAllSummonerInfo(*Identity, StbServer_GetAllSummonerInfoServer) error
	ShareSummonerInfo(StbServer_ShareSummonerInfoServer) error
	SendFile(StbServer_SendFileServer) error
	SendGroupFile(StbServer_SendGroupFileServer) error
	HeartBeat(StbServer_HeartBeatServer) error
	mustEmbedUnimplementedStbServerServer()
}

// UnimplementedStbServerServer must be embedded to have forward compatible implementations.
type UnimplementedStbServerServer struct {
}

func (UnimplementedStbServerServer) GetSummonerInfo(context.Context, *Identity) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummonerInfo not implemented")
}
func (UnimplementedStbServerServer) PutSummonerInfo(StbServer_PutSummonerInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method PutSummonerInfo not implemented")
}
func (UnimplementedStbServerServer) GetAllSummonerInfo(*Identity, StbServer_GetAllSummonerInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllSummonerInfo not implemented")
}
func (UnimplementedStbServerServer) ShareSummonerInfo(StbServer_ShareSummonerInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method ShareSummonerInfo not implemented")
}
func (UnimplementedStbServerServer) SendFile(StbServer_SendFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedStbServerServer) SendGroupFile(StbServer_SendGroupFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SendGroupFile not implemented")
}
func (UnimplementedStbServerServer) HeartBeat(StbServer_HeartBeatServer) error {
	return status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedStbServerServer) mustEmbedUnimplementedStbServerServer() {}

// UnsafeStbServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StbServerServer will
// result in compilation errors.
type UnsafeStbServerServer interface {
	mustEmbedUnimplementedStbServerServer()
}

func RegisterStbServerServer(s grpc.ServiceRegistrar, srv StbServerServer) {
	s.RegisterService(&StbServer_ServiceDesc, srv)
}

func _StbServer_GetSummonerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StbServerServer).GetSummonerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StbServer_GetSummonerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StbServerServer).GetSummonerInfo(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _StbServer_PutSummonerInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StbServerServer).PutSummonerInfo(&stbServerPutSummonerInfoServer{stream})
}

type StbServer_PutSummonerInfoServer interface {
	SendAndClose(*Character) error
	Recv() (*Identity, error)
	grpc.ServerStream
}

type stbServerPutSummonerInfoServer struct {
	grpc.ServerStream
}

func (x *stbServerPutSummonerInfoServer) SendAndClose(m *Character) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stbServerPutSummonerInfoServer) Recv() (*Identity, error) {
	m := new(Identity)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StbServer_GetAllSummonerInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Identity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StbServerServer).GetAllSummonerInfo(m, &stbServerGetAllSummonerInfoServer{stream})
}

type StbServer_GetAllSummonerInfoServer interface {
	Send(*Character) error
	grpc.ServerStream
}

type stbServerGetAllSummonerInfoServer struct {
	grpc.ServerStream
}

func (x *stbServerGetAllSummonerInfoServer) Send(m *Character) error {
	return x.ServerStream.SendMsg(m)
}

func _StbServer_ShareSummonerInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StbServerServer).ShareSummonerInfo(&stbServerShareSummonerInfoServer{stream})
}

type StbServer_ShareSummonerInfoServer interface {
	Send(*Character) error
	Recv() (*Identity, error)
	grpc.ServerStream
}

type stbServerShareSummonerInfoServer struct {
	grpc.ServerStream
}

func (x *stbServerShareSummonerInfoServer) Send(m *Character) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stbServerShareSummonerInfoServer) Recv() (*Identity, error) {
	m := new(Identity)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StbServer_SendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StbServerServer).SendFile(&stbServerSendFileServer{stream})
}

type StbServer_SendFileServer interface {
	SendAndClose(*FileResult) error
	Recv() (*FileMessage, error)
	grpc.ServerStream
}

type stbServerSendFileServer struct {
	grpc.ServerStream
}

func (x *stbServerSendFileServer) SendAndClose(m *FileResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stbServerSendFileServer) Recv() (*FileMessage, error) {
	m := new(FileMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StbServer_SendGroupFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StbServerServer).SendGroupFile(&stbServerSendGroupFileServer{stream})
}

type StbServer_SendGroupFileServer interface {
	SendAndClose(*FileResult) error
	Recv() (*FileMessage, error)
	grpc.ServerStream
}

type stbServerSendGroupFileServer struct {
	grpc.ServerStream
}

func (x *stbServerSendGroupFileServer) SendAndClose(m *FileResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stbServerSendGroupFileServer) Recv() (*FileMessage, error) {
	m := new(FileMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StbServer_HeartBeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StbServerServer).HeartBeat(&stbServerHeartBeatServer{stream})
}

type StbServer_HeartBeatServer interface {
	SendAndClose(*Result) error
	Recv() (*Heart, error)
	grpc.ServerStream
}

type stbServerHeartBeatServer struct {
	grpc.ServerStream
}

func (x *stbServerHeartBeatServer) SendAndClose(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stbServerHeartBeatServer) Recv() (*Heart, error) {
	m := new(Heart)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StbServer_ServiceDesc is the grpc.ServiceDesc for StbServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StbServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stbserver.StbServer",
	HandlerType: (*StbServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSummonerInfo",
			Handler:    _StbServer_GetSummonerInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutSummonerInfo",
			Handler:       _StbServer_PutSummonerInfo_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAllSummonerInfo",
			Handler:       _StbServer_GetAllSummonerInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ShareSummonerInfo",
			Handler:       _StbServer_ShareSummonerInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendFile",
			Handler:       _StbServer_SendFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendGroupFile",
			Handler:       _StbServer_SendGroupFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "HeartBeat",
			Handler:       _StbServer_HeartBeat_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "stbserver.proto",
}
